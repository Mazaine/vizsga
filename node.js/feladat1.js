/*1. feladat: Hello vÃ©gpont
ðŸ“‹ CÃ©l:
IP: 127.0.0.1

Port: 3000

GET kÃ©rÃ©s a /api/hello vÃ©gpontra

JSON vÃ¡lasz: { "message": "HellÃ³ VilÃ¡g!" }

KonzolÃ¼zenet a szerver indÃ­tÃ¡sakor*/

// 1. LÃ©pÃ©s: HTTP modul betÃ¶ltÃ©se
const http = require('http');

// 2. LÃ©pÃ©s: BeÃ¡llÃ­tÃ¡sok (IP Ã©s port)
const hostname = '127.0.0.1';
const port = 3000;

// 3. LÃ©pÃ©s: Szerver lÃ©trehozÃ¡sa
const server = http.createServer((req, res) => {
  // 4. LÃ©pÃ©s: EllenÅ‘rizzÃ¼k az Ãºtvonalat Ã©s a HTTP metÃ³dust
  if (req.url === '/api/hello' && req.method === 'GET') {
    // 5. LÃ©pÃ©s: VÃ¡laszÃ¼zenet lÃ©trehozÃ¡sa
    const response = {
      message: 'HellÃ³ VilÃ¡g!'
    };

    // 6. LÃ©pÃ©s: FejlÃ©c beÃ¡llÃ­tÃ¡sa (200 OK, JSON tÃ­pus)
    res.writeHead(200, { 'Content-Type': 'application/json' });

    // 7. LÃ©pÃ©s: JSON visszakÃ¼ldÃ©se
    res.end(JSON.stringify(response));
  } else {
    // 8. LÃ©pÃ©s: Nem talÃ¡lhatÃ³ vÃ¡lasz (404)
    res.writeHead(404, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify({ error: 'Nem talÃ¡lhatÃ³ vÃ©gpont' }));
  }
});

// 9. LÃ©pÃ©s: Szerver elindÃ­tÃ¡sa
server.listen(port, hostname, () => {
  console.log(`Szerver elindult: http://${hostname}:${port}`);
});
